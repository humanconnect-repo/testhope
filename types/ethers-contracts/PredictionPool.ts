/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace PredictionPool {
      
    export type BetStruct = {amount: BigNumberish, choice: boolean, claimed: boolean, timestamp: BigNumberish}

    export type BetStructOutput = [amount: bigint, choice: boolean, claimed: boolean, timestamp: bigint] & {amount: bigint, choice: boolean, claimed: boolean, timestamp: bigint }
  
    }

  export interface PredictionPoolInterface extends Interface {
    getFunction(nameOrSignature: "BASIS_POINTS" | "FEE_PERCENTAGE" | "FEE_WALLET" | "bettors" | "canClaimRefund" | "canUserBet" | "cancelPool" | "cancelled" | "category" | "claim" | "claimRefund" | "closingBid" | "closingDate" | "description" | "emergencyClose" | "emergencyResolve" | "emergencyStop" | "factory" | "getBetDescription" | "getBettingStatus" | "getBettors" | "getFeeInfo" | "getLosingPot" | "getPoolInfo" | "getPoolStats" | "getRedistributionInfo" | "getUserBet" | "getWinningPot" | "hasClaimed" | "isBettingCurrentlyOpen" | "isClosed" | "owner" | "placeBet" | "renounceOwnership" | "setEmergencyStop" | "setWinner" | "title" | "totalBets" | "totalClaimed" | "totalNo" | "totalYes" | "transferOwnership" | "userBets" | "winner" | "winnerSet"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BetPlaced" | "EmergencyResolution" | "EmergencyStopToggled" | "FeeTransferred" | "OwnershipTransferred" | "PoolCancelled" | "PoolClosed" | "RefundClaimed" | "RewardClaimed" | "WinnerSet"): EventFragment;

    encodeFunctionData(functionFragment: 'BASIS_POINTS', values?: undefined): string;
encodeFunctionData(functionFragment: 'FEE_PERCENTAGE', values?: undefined): string;
encodeFunctionData(functionFragment: 'FEE_WALLET', values?: undefined): string;
encodeFunctionData(functionFragment: 'bettors', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'canClaimRefund', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'canUserBet', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'cancelPool', values: [string]): string;
encodeFunctionData(functionFragment: 'cancelled', values?: undefined): string;
encodeFunctionData(functionFragment: 'category', values?: undefined): string;
encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
encodeFunctionData(functionFragment: 'claimRefund', values?: undefined): string;
encodeFunctionData(functionFragment: 'closingBid', values?: undefined): string;
encodeFunctionData(functionFragment: 'closingDate', values?: undefined): string;
encodeFunctionData(functionFragment: 'description', values?: undefined): string;
encodeFunctionData(functionFragment: 'emergencyClose', values?: undefined): string;
encodeFunctionData(functionFragment: 'emergencyResolve', values: [boolean, string]): string;
encodeFunctionData(functionFragment: 'emergencyStop', values?: undefined): string;
encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
encodeFunctionData(functionFragment: 'getBetDescription', values?: undefined): string;
encodeFunctionData(functionFragment: 'getBettingStatus', values?: undefined): string;
encodeFunctionData(functionFragment: 'getBettors', values?: undefined): string;
encodeFunctionData(functionFragment: 'getFeeInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getLosingPot', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPoolInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPoolStats', values?: undefined): string;
encodeFunctionData(functionFragment: 'getRedistributionInfo', values?: undefined): string;
encodeFunctionData(functionFragment: 'getUserBet', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getWinningPot', values?: undefined): string;
encodeFunctionData(functionFragment: 'hasClaimed', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'isBettingCurrentlyOpen', values?: undefined): string;
encodeFunctionData(functionFragment: 'isClosed', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'placeBet', values: [boolean]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setEmergencyStop', values: [boolean]): string;
encodeFunctionData(functionFragment: 'setWinner', values: [boolean]): string;
encodeFunctionData(functionFragment: 'title', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalBets', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalClaimed', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalNo', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalYes', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'userBets', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'winner', values?: undefined): string;
encodeFunctionData(functionFragment: 'winnerSet', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'BASIS_POINTS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FEE_PERCENTAGE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FEE_WALLET', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'bettors', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canClaimRefund', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'canUserBet', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelled', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'category', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimRefund', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'closingBid', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'closingDate', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'description', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyClose', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyResolve', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyStop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBetDescription', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBettingStatus', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBettors', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getFeeInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getLosingPot', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolStats', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getRedistributionInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserBet', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getWinningPot', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasClaimed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isBettingCurrentlyOpen', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isClosed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'placeBet', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setEmergencyStop', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setWinner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'title', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalBets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalClaimed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalNo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalYes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userBets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'winner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'winnerSet', data: BytesLike): Result;
  }

  
    export namespace BetPlacedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish, choice: boolean, totalYes: BigNumberish, totalNo: BigNumberish, predictionTitle: string, userChoice: string];
      export type OutputTuple = [user: string, amount: bigint, choice: boolean, totalYes: bigint, totalNo: bigint, predictionTitle: string, userChoice: string];
      export interface OutputObject {user: string, amount: bigint, choice: boolean, totalYes: bigint, totalNo: bigint, predictionTitle: string, userChoice: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmergencyResolutionEvent {
      export type InputTuple = [winner: boolean, reason: string];
      export type OutputTuple = [winner: boolean, reason: string];
      export interface OutputObject {winner: boolean, reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace EmergencyStopToggledEvent {
      export type InputTuple = [stopped: boolean];
      export type OutputTuple = [stopped: boolean];
      export interface OutputObject {stopped: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FeeTransferredEvent {
      export type InputTuple = [feeWallet: AddressLike, amount: BigNumberish];
      export type OutputTuple = [feeWallet: string, amount: bigint];
      export interface OutputObject {feeWallet: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolCancelledEvent {
      export type InputTuple = [reason: string];
      export type OutputTuple = [reason: string];
      export interface OutputObject {reason: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolClosedEvent {
      export type InputTuple = [];
      export type OutputTuple = [];
      export interface OutputObject {};
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RefundClaimedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint];
      export interface OutputObject {user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardClaimedEvent {
      export type InputTuple = [user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [user: string, amount: bigint];
      export interface OutputObject {user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace WinnerSetEvent {
      export type InputTuple = [winner: boolean];
      export type OutputTuple = [winner: boolean];
      export interface OutputObject {winner: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PredictionPool extends BaseContract {
    
    connect(runner?: ContractRunner | null): PredictionPool;
    waitForDeployment(): Promise<this>;

    interface: PredictionPoolInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BASIS_POINTS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    FEE_PERCENTAGE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    FEE_WALLET: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    bettors: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    canClaimRefund: TypedContractMethod<
      [_user: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    canUserBet: TypedContractMethod<
      [_user: AddressLike, ],
      [[boolean, string] & {canBet: boolean, reason: string }],
      'view'
    >
    

    
    cancelPool: TypedContractMethod<
      [_reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    cancelled: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    category: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    claim: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    claimRefund: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    closingBid: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    closingDate: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    description: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    emergencyClose: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    emergencyResolve: TypedContractMethod<
      [_winner: boolean, _reason: string, ],
      [void],
      'nonpayable'
    >
    

    
    emergencyStop: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    factory: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getBetDescription: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getBettingStatus: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getBettors: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getFeeInfo: TypedContractMethod<
      [],
      [[string, bigint, bigint, boolean] & {_feeWallet: string, _feePercentage: bigint, _calculatedFee: bigint, _feeSent: boolean }],
      'view'
    >
    

    
    getLosingPot: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getPoolInfo: TypedContractMethod<
      [],
      [[string, string, string, bigint, bigint] & {_title: string, _description: string, _category: string, _closingDate: bigint, _closingBid: bigint }],
      'view'
    >
    

    
    getPoolStats: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, boolean, boolean, boolean] & {_totalYes: bigint, _totalNo: bigint, _totalBets: bigint, _bettorCount: bigint, _isClosed: boolean, _winnerSet: boolean, _winner: boolean }],
      'view'
    >
    

    
    getRedistributionInfo: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_winningPot: bigint, _losingPot: bigint, _feeAmount: bigint, _netLosingPot: bigint, _totalRedistribution: bigint }],
      'view'
    >
    

    
    getUserBet: TypedContractMethod<
      [_user: AddressLike, ],
      [PredictionPool.BetStructOutput],
      'view'
    >
    

    
    getWinningPot: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    hasClaimed: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isBettingCurrentlyOpen: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    isClosed: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    placeBet: TypedContractMethod<
      [_choice: boolean, ],
      [void],
      'payable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setEmergencyStop: TypedContractMethod<
      [_stop: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    setWinner: TypedContractMethod<
      [_winner: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    title: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    totalBets: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalClaimed: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalNo: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalYes: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    userBets: TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, boolean, boolean, bigint] & {amount: bigint, choice: boolean, claimed: boolean, timestamp: bigint }],
      'view'
    >
    

    
    winner: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    

    
    winnerSet: TypedContractMethod<
      [],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BASIS_POINTS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'FEE_PERCENTAGE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'FEE_WALLET'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'bettors'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'canClaimRefund'): TypedContractMethod<
      [_user: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'canUserBet'): TypedContractMethod<
      [_user: AddressLike, ],
      [[boolean, string] & {canBet: boolean, reason: string }],
      'view'
    >;
getFunction(nameOrSignature: 'cancelPool'): TypedContractMethod<
      [_reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'cancelled'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'category'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'claim'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimRefund'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'closingBid'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'closingDate'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'description'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'emergencyClose'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyResolve'): TypedContractMethod<
      [_winner: boolean, _reason: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyStop'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'factory'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getBetDescription'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getBettingStatus'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getBettors'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getFeeInfo'): TypedContractMethod<
      [],
      [[string, bigint, bigint, boolean] & {_feeWallet: string, _feePercentage: bigint, _calculatedFee: bigint, _feeSent: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getLosingPot'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolInfo'): TypedContractMethod<
      [],
      [[string, string, string, bigint, bigint] & {_title: string, _description: string, _category: string, _closingDate: bigint, _closingBid: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolStats'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, boolean, boolean, boolean] & {_totalYes: bigint, _totalNo: bigint, _totalBets: bigint, _bettorCount: bigint, _isClosed: boolean, _winnerSet: boolean, _winner: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getRedistributionInfo'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint] & {_winningPot: bigint, _losingPot: bigint, _feeAmount: bigint, _netLosingPot: bigint, _totalRedistribution: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserBet'): TypedContractMethod<
      [_user: AddressLike, ],
      [PredictionPool.BetStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getWinningPot'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasClaimed'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isBettingCurrentlyOpen'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isClosed'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'placeBet'): TypedContractMethod<
      [_choice: boolean, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setEmergencyStop'): TypedContractMethod<
      [_stop: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setWinner'): TypedContractMethod<
      [_winner: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'title'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'totalBets'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalClaimed'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalNo'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalYes'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userBets'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[bigint, boolean, boolean, bigint] & {amount: bigint, choice: boolean, claimed: boolean, timestamp: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'winner'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'winnerSet'): TypedContractMethod<
      [],
      [boolean],
      'view'
    >;

    getEvent(key: 'BetPlaced'): TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
getEvent(key: 'EmergencyResolution'): TypedContractEvent<EmergencyResolutionEvent.InputTuple, EmergencyResolutionEvent.OutputTuple, EmergencyResolutionEvent.OutputObject>;
getEvent(key: 'EmergencyStopToggled'): TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
getEvent(key: 'FeeTransferred'): TypedContractEvent<FeeTransferredEvent.InputTuple, FeeTransferredEvent.OutputTuple, FeeTransferredEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PoolCancelled'): TypedContractEvent<PoolCancelledEvent.InputTuple, PoolCancelledEvent.OutputTuple, PoolCancelledEvent.OutputObject>;
getEvent(key: 'PoolClosed'): TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
getEvent(key: 'RefundClaimed'): TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
getEvent(key: 'RewardClaimed'): TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
getEvent(key: 'WinnerSet'): TypedContractEvent<WinnerSetEvent.InputTuple, WinnerSetEvent.OutputTuple, WinnerSetEvent.OutputObject>;

    filters: {
      
      'BetPlaced(address,uint256,bool,uint256,uint256,string,string)': TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
      BetPlaced: TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
    

      'EmergencyResolution(bool,string)': TypedContractEvent<EmergencyResolutionEvent.InputTuple, EmergencyResolutionEvent.OutputTuple, EmergencyResolutionEvent.OutputObject>;
      EmergencyResolution: TypedContractEvent<EmergencyResolutionEvent.InputTuple, EmergencyResolutionEvent.OutputTuple, EmergencyResolutionEvent.OutputObject>;
    

      'EmergencyStopToggled(bool)': TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
      EmergencyStopToggled: TypedContractEvent<EmergencyStopToggledEvent.InputTuple, EmergencyStopToggledEvent.OutputTuple, EmergencyStopToggledEvent.OutputObject>;
    

      'FeeTransferred(address,uint256)': TypedContractEvent<FeeTransferredEvent.InputTuple, FeeTransferredEvent.OutputTuple, FeeTransferredEvent.OutputObject>;
      FeeTransferred: TypedContractEvent<FeeTransferredEvent.InputTuple, FeeTransferredEvent.OutputTuple, FeeTransferredEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PoolCancelled(string)': TypedContractEvent<PoolCancelledEvent.InputTuple, PoolCancelledEvent.OutputTuple, PoolCancelledEvent.OutputObject>;
      PoolCancelled: TypedContractEvent<PoolCancelledEvent.InputTuple, PoolCancelledEvent.OutputTuple, PoolCancelledEvent.OutputObject>;
    

      'PoolClosed()': TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
      PoolClosed: TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
    

      'RefundClaimed(address,uint256)': TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
      RefundClaimed: TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
    

      'RewardClaimed(address,uint256)': TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
      RewardClaimed: TypedContractEvent<RewardClaimedEvent.InputTuple, RewardClaimedEvent.OutputTuple, RewardClaimedEvent.OutputObject>;
    

      'WinnerSet(bool)': TypedContractEvent<WinnerSetEvent.InputTuple, WinnerSetEvent.OutputTuple, WinnerSetEvent.OutputObject>;
      WinnerSet: TypedContractEvent<WinnerSetEvent.InputTuple, WinnerSetEvent.OutputTuple, WinnerSetEvent.OutputObject>;
    
    };
  }