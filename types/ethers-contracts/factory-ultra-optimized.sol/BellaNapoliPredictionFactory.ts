/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace BellaNapoliPredictionFactory {
      
    export type PoolInfoStruct = {title: string, description: string, category: string, closingDate: BigNumberish, closingBid: BigNumberish, creator: AddressLike, isActive: boolean, createdAt: BigNumberish}

    export type PoolInfoStructOutput = [title: string, description: string, category: string, closingDate: bigint, closingBid: bigint, creator: string, isActive: boolean, createdAt: bigint] & {title: string, description: string, category: string, closingDate: bigint, closingBid: bigint, creator: string, isActive: boolean, createdAt: bigint }
  
    }

  export interface BellaNapoliPredictionFactoryInterface extends Interface {
    getFunction(nameOrSignature: "BASIS_POINTS" | "FEE_PERCENTAGE" | "allPools" | "closePool" | "collectFees" | "createPool" | "getAllPools" | "getPoolCount" | "getPoolInfo" | "getPoolsByCategory" | "owner" | "poolInfo" | "renounceOwnership" | "totalFeesCollected" | "transferOwnership" | "withdrawFees"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "FeesCollected" | "OwnershipTransferred" | "PoolClosed" | "PoolCreated"): EventFragment;

    encodeFunctionData(functionFragment: 'BASIS_POINTS', values?: undefined): string;
encodeFunctionData(functionFragment: 'FEE_PERCENTAGE', values?: undefined): string;
encodeFunctionData(functionFragment: 'allPools', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'closePool', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'collectFees', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'createPool', values: [string, string, string, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getAllPools', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPoolCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPoolInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getPoolsByCategory', values: [string]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'poolInfo', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalFeesCollected', values?: undefined): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'withdrawFees', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'BASIS_POINTS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FEE_PERCENTAGE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'allPools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'closePool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'collectFees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllPools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolsByCategory', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'poolInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalFeesCollected', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'withdrawFees', data: BytesLike): Result;
  }

  
    export namespace FeesCollectedEvent {
      export type InputTuple = [poolAddress: AddressLike, amount: BigNumberish];
      export type OutputTuple = [poolAddress: string, amount: bigint];
      export interface OutputObject {poolAddress: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolClosedEvent {
      export type InputTuple = [poolAddress: AddressLike, isActive: boolean];
      export type OutputTuple = [poolAddress: string, isActive: boolean];
      export interface OutputObject {poolAddress: string, isActive: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PoolCreatedEvent {
      export type InputTuple = [poolAddress: AddressLike, title: string, category: string, creator: AddressLike, closingDate: BigNumberish, closingBid: BigNumberish];
      export type OutputTuple = [poolAddress: string, title: string, category: string, creator: string, closingDate: bigint, closingBid: bigint];
      export interface OutputObject {poolAddress: string, title: string, category: string, creator: string, closingDate: bigint, closingBid: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface BellaNapoliPredictionFactory extends BaseContract {
    
    connect(runner?: ContractRunner | null): BellaNapoliPredictionFactory;
    waitForDeployment(): Promise<this>;

    interface: BellaNapoliPredictionFactoryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BASIS_POINTS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    FEE_PERCENTAGE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    allPools: TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >
    

    
    closePool: TypedContractMethod<
      [_poolAddress: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    collectFees: TypedContractMethod<
      [_poolAddress: AddressLike, _claimAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    createPool: TypedContractMethod<
      [_title: string, _description: string, _category: string, _closingDate: BigNumberish, _closingBid: BigNumberish, ],
      [string],
      'nonpayable'
    >
    

    
    getAllPools: TypedContractMethod<
      [],
      [string[]],
      'view'
    >
    

    
    getPoolCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getPoolInfo: TypedContractMethod<
      [_poolAddress: AddressLike, ],
      [BellaNapoliPredictionFactory.PoolInfoStructOutput],
      'view'
    >
    

    
    getPoolsByCategory: TypedContractMethod<
      [_category: string, ],
      [string[]],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    poolInfo: TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, bigint, bigint, string, boolean, bigint] & {title: string, description: string, category: string, closingDate: bigint, closingBid: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    totalFeesCollected: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    withdrawFees: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BASIS_POINTS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'FEE_PERCENTAGE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'allPools'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'closePool'): TypedContractMethod<
      [_poolAddress: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'collectFees'): TypedContractMethod<
      [_poolAddress: AddressLike, _claimAmount: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createPool'): TypedContractMethod<
      [_title: string, _description: string, _category: string, _closingDate: BigNumberish, _closingBid: BigNumberish, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAllPools'): TypedContractMethod<
      [],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolInfo'): TypedContractMethod<
      [_poolAddress: AddressLike, ],
      [BellaNapoliPredictionFactory.PoolInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getPoolsByCategory'): TypedContractMethod<
      [_category: string, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'poolInfo'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[string, string, string, bigint, bigint, string, boolean, bigint] & {title: string, description: string, category: string, closingDate: bigint, closingBid: bigint, creator: string, isActive: boolean, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'totalFeesCollected'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'withdrawFees'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'FeesCollected'): TypedContractEvent<FeesCollectedEvent.InputTuple, FeesCollectedEvent.OutputTuple, FeesCollectedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'PoolClosed'): TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
getEvent(key: 'PoolCreated'): TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;

    filters: {
      
      'FeesCollected(address,uint256)': TypedContractEvent<FeesCollectedEvent.InputTuple, FeesCollectedEvent.OutputTuple, FeesCollectedEvent.OutputObject>;
      FeesCollected: TypedContractEvent<FeesCollectedEvent.InputTuple, FeesCollectedEvent.OutputTuple, FeesCollectedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'PoolClosed(address,bool)': TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
      PoolClosed: TypedContractEvent<PoolClosedEvent.InputTuple, PoolClosedEvent.OutputTuple, PoolClosedEvent.OutputObject>;
    

      'PoolCreated(address,string,string,address,uint256,uint256)': TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
      PoolCreated: TypedContractEvent<PoolCreatedEvent.InputTuple, PoolCreatedEvent.OutputTuple, PoolCreatedEvent.OutputObject>;
    
    };
  }